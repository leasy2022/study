package protobuf.demo1;

import com.google.protobuf.InvalidProtocolBufferException;
import protobuf.demo1.LYPhoneMessage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * Created by wushang on 16/3/31.
 */
public class _1_test {
    public static void main(String[] args) {
        System.out.println("==================This is simple message.================");
        //如前所述，不能直接构造该消息类对象，只能通过他的内部Builder类构造并完成所有字段的初始化。
        LYPhoneMessage.LogonReqMessage.Builder logonReqBuilder = LYPhoneMessage.LogonReqMessage.newBuilder();
        logonReqBuilder.setAcctID(20);
        logonReqBuilder.setPasswd("Hello World");
        //builder对象初始化完毕后，再通过build方法生成与之对应的消息类对象。
        LYPhoneMessage.LogonReqMessage logonReq = logonReqBuilder.build();
        int length = logonReq.getSerializedSize();
        System.out.println("The result length is " + length);
        //直接序列化到内存中，之后可对该内存进行二次加工后再写到本地文件或发送到远端，如加密。
        byte[] buf = logonReq.toByteArray();

        try {
            LYPhoneMessage.LogonReqMessage logonReq2 = LYPhoneMessage.LogonReqMessage.parseFrom(buf);
            System.out.println("acctID = " + logonReq2.getAcctID() + "\tpassword = " + logonReq2.getPasswd());
        } catch (InvalidProtocolBufferException e) {
            e.printStackTrace();
        }
//        //需要说明的是，文件中的内容是由之前C++实例代码写入的，这里这样写主要是一种验证。
//        System.out.println("Reading data from local file generated by C++");
//        try {
//            LYPhoneMessage.LogonReqMessage logonReq3 = LYPhoneMessage.LogonReqMessage.parseFrom(new FileInputStream("/Users/wushang/Downloads/pro_test/LogonReq.dat"));
//            System.out.println("acctID = " + logonReq3.getAcctID() + "\tpassword = " + logonReq3.getPasswd());
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
    }
}
